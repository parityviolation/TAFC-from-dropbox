% bulkBonsaiFilenames = {'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-27T10_11_17',...
%     'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-20T10_35_03',...  
%     'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-19T11_27_42',...
%     'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-18T13_20_39',...
%     'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-15T11_20_30',...
%     'FI12_1504_bulk_TAFCl3_varReward_tone2015-01-20T12_42_11',...
%     'FI12_1504_bulk_TAFCl3_varReward_tone2015-01-19T13_31_27',...
%     'FI12_1504_bulk_TAFCl3_varReward_tone2015-01-18T15_49_17',...
%     'FI12_1504_bulk_TAFCl3_varReward_tone2015-01-15T14_03_07',...
%     'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-12T11_16_26',...
%     'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-08T10_49_01',...
%     'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-07T11_02_20',...
%     'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-06T12_22_21',...
%     'FI12_1480_bulk_TAFCl3_varReward_invChannels2015-01-01T17_05_57',...
%     'FI12_1479_bulk_TAFCl3_varReward_tone2015-01-09T10_33_14',...
%     'FI12_1176_bulk_TAFCl3_varReward_tone2015-01-08T17_56_56',...
%     'FI12_1176_bulk_TAFCl3_varReward_tone2015-01-07T15_00_45',...
%     'FI12_1481_bulk_TAFCl3_varReward_tone2015-01-07T13_39_44',...
%     'FI12_1481_bulk_TAFCl3_varReward_tone2015-01-06T16_20_30',...
%     'FI12_1215_bulk_TAFCl3_varReward_tone2015-01-07T12_13_05',...
%     'FI12_1215_bulk_TAFCl3_varReward_tone2015-01-06T14_41_53'};
% 
% bulkArduinoFilenames = {'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150127_SSAB_(I)1',...
%     'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150120_SSAB_(I)1',...
%     'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150119_SSAB_(I)1',...
%     'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150118_SSAB_(I)1',...
%     'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150115_SSAB_(I)1',...
%     'FI12_1504_TAFCl3_BULK_reward_prob_tone_box1_150120_SSAB_(I)1',...
%     'FI12_1504_TAFCl3_BULK_reward_prob_tone_box1_150119_SSAB_(I)1',...
%     'FI12_1504_TAFCl3_BULK_reward_prob_tone_box1_150118_SSAB_(I)1',...
%     'FI12_1504_TAFCl3_BULK_reward_prob_tone_box1_150115_SSAB_(I)1',...
%     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150112_SSAB_(I)1',...
%     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150108_SSAB_(I)1',...
%     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150107_SSAB_(I)1',...
%     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150106_SSAB_(I)1',...
%     'FI12_1480_TAFCl3_BULK_reward_prob_box1_150101_SSAB_(I)1',...
%     'FI12_1479_TAFCl3_BULK_reward_prob_tone_box1_150109_SSAB_(I)1',...
%     'FI12_1176_TAFCl3_BULK_reward_prob_tone_box1_150108_SSAB_(I)1',...
%     'FI12_1176_TAFCl3_BULK_reward_prob_tone_box1_150107_SSAB_(I)1',...
%     'FI12_1481_TAFCl3_BULK_reward_prob_tone_box1_150107_SSAB_(I)1',...
%     'FI12_1481_TAFCl3_BULK_reward_prob_tone_box1_150106_SSAB_(I)1',...
%     'FI12_1215_TAFCl3_BULK_reward_prob_tone_box1_150107_SSAB_(I)1',...
%     'FI12_1215_TAFCl3_BULK_reward_prob_tone_box1_150106_SSAB_(I)1'};

bulkBonsaiFilenames = {'FI12_1502_bulk_TAFCl3_varReward_tone2015-01-27T10_11_17',...
    'FI12_1502_bulk_TAFCl3_varReward_tone2015-02-10T12_25_58',...
    'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-12T11_16_26',...
    'FI12_1480_bulk_TAFCl3_varReward_tone2015-01-08T10_49_01'};

bulkArduinoFilenames = {'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150127_SSAB_(I)1',...
    'FI12_1502_TAFCl3_BULK_reward_prob_tone_box1_150210_SSAB_(I)1',...
     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150112_SSAB_(I)1',...
     'FI12_1480_TAFCl3_BULK_reward_prob_tone_box1_150108_SSAB_(I)1'};




nFiles = length(bulkBonsaiFilenames);


for iFile = 1:nFiles
    
    indxUnderScore{iFile,:} = strfind(bulkBonsaiFilenames{iFile},'_');
    animalList{iFile} = bulkBonsaiFilenames{iFile}(1:indxUnderScore{iFile}(2)-1);
    
    
end
                    


animalNames = unique(animalList);
nAnimals = length(animalNames);

animalsGcamp = {'FI12_1176','FI12_1215','FI12_1480',...
                'FI12_1481','FI12_1479'};
Cond(1).Virus = 'Gcamp6f';
Cond(2).Virus = 'YFP';
bigDp = [];


useSmoothData = 1;
size_movingAverage = 1000; %in ms
sizeNormWind = 1000; %in ms
splitByCond = 1;

%%


for iAnimal = 1:nAnimals
    dayCorrGreenAll = [];
    
    animalNow = animalNames{iAnimal};

    daysIdx = find(strcmp(animalList,animalNow));
    
    nDays = length(daysIdx);
    
    if sum(strcmp(animalsGcamp,animalNow))>0
       
       BulkData(iAnimal).AnimalName = animalNow;
       BulkData(iAnimal).Virus = Cond(1).Virus;
       virusGcamp(iAnimal) = 1; 
       
       
    else
        
       BulkData(iAnimal).AnimalName = animalNow;
       BulkData(iAnimal).Virus = Cond(2).Virus;
       virusGcamp(iAnimal) = 0; 
       
    end
    
trialCond = [];

 %%   
 for iDay = 1:nDays
     
     
     
     %% for multiple channels, try to find a way of
     
     data.nChannels = 4;
     data.sampleRate = 1000; %samples per second
data.dt = 1/data.sampleRate;

if isunix
    slash = '/';
else
    slash = '\';
end

r = brigdefs();
bulkDataDir = r.Dir.BulkData;
behavDataDir = r.Dir.DataBehav;



%[FileName,PathName] = uigetfile(fullfile(bulkDatadir,slash,'*.*'),'Select Bonsai bulk file to analyze');

FullPathBonsaiData = fullfile([bulkDataDir,slash,bulkBonsaiFilenames{daysIdx(iDay)}]);


fid = fopen(FullPathBonsaiData,'r');


[data.raw,count]=fread(fid,'float64');
fclose(fid);

FullPathArduinoData = fullfile([behavDataDir,slash,animalNow,slash,bulkArduinoFilenames{daysIdx(iDay)}]);

dp = builddp(1,1,FullPathArduinoData);
data.raw = data.raw';


% data.raw = data.raw(1:length(data.raw)/2);
% count = count/2;
if strcmp(dp.Date,'150101')&& strcmp(dp.Animal,'FI12_1480')
    greenInd = [2:data.nChannels:count];
    redInd = [1:data.nChannels:count];
    syncInd = [4:data.nChannels:count];
    rewardSyncInd = [3:data.nChannels:count];
    
    
else
    
    greenInd = [1:data.nChannels:count];
    redInd = [2:data.nChannels:count];
    syncInd = [4:data.nChannels:count];
    rewardSyncInd = [3:data.nChannels:count];
    
end

dataGreen = data.raw(greenInd);
dataRed = data.raw(redInd);
dataSync = data.raw(syncInd);
data.Sync = dataSync;
dataRewardSync = data.raw(rewardSyncInd);
data.rewardSync = dataRewardSync;


data.splitCh = [dataGreen ;dataRed];

alignCond = 'reward';
%alignCond = 'trialInit';
splitField = 'RewardAmount';
%param = 'ChoiceLeft';

WOI = [6 10];

%WOI = [2 2];

 
 %% for trial init sync
 
 syncPulseTimesBulk = getBulkSyncPulse(data,20);
 
 
 %% for aligning data on events

%When we don't have reward sync pulse
if strcmp(alignCond, 'reward');

alignEventTime = dp.firstSidePokeTime-dp.TrialAvail;


elseif strcmp(alignCond, 'trialInit');
alignEventTime = dp.TrialInit-dp.TrialAvail;

else
    
alignEventTime = dp.firstSidePokeTime-dp.TrialAvail;
alignCond = 'reward';  
end


eventSyncPulseTimesBulk = syncPulseTimesBulk + alignEventTime;


dp.Bulk.alignCond = alignCond;
dp.Bulk.alignCondTimesSync = eventSyncPulseTimesBulk;

dpCorrect = filtbdata(dp,0,{'ChoiceCorrect', 1});

eventSyncPulseTimesBulk = dpCorrect.Bulk.alignCondTimesSync;

 
 %% low pass filtering
high = 1;
low = 0;
data.lowCut = 50;

data.lowFilt=[];

for iTrialNow = 1:size(data.splitCh,1)
    
    data.lowFilt(iTrialNow,:) = filterdata(data.splitCh(iTrialNow,:),data.dt,data.lowCut,low);
    
end
%%

%% for protocol with dif reward magnitudes

nRewards = length(eventSyncPulseTimesBulk);

baselineWindow = 5; %in seconds
baselineWindow = baselineWindow*data.sampleRate; %in samples
baselineW = [];
baseline = [];
WOI = WOI*data.sampleRate;
xaxis = [-WOI(1):WOI(2)]';
deltaF = [];
deltaF_F = [];
colorsG = [];
colorsR = [];
colors = [];


if isfield(dp,splitField)   
    
    splitCond = unique(dp.(splitField));
    
    splitCond = splitCond(~isnan(splitCond));
    
    range = linspace(0.4,1,length(splitCond))';
    
    colorsG = zeros(length(splitCond),3);
    
    colorsG(:,2) = range;
    
    colorsR = zeros(length(splitCond),3);
    
    colorsR(:,1) = range;
    
    colors(:,:,1) = colorsG;
    
    colors(:,:,2) = colorsR;
    
   
%%   
     deltaF_F_g_all = [];
     deltaF_F_r_all = [];
     deltaF_F_g_all_smooth = [];
     deltaF_F_r_all_smooth = [];
     
     for iCond = 1:length(splitCond)
         thisDp = filtbdata(dpCorrect,0,{splitField, splitCond(iCond)});
         
         
         baselineW = [];
         baseline = [];
         deltaF = [];
         deltaF_F = [];
         smooth_DeltaF_F = [];
         thisCond = []; 
%          length_kernel = 1000;
%          sd_kernel = 0.3;
%          alpha = 1/sd_kernel;
        
         
         
         for iChannel = 1:2
             
             for iTrialNow = 1:thisDp.ntrials
                 
                 thisTrial = thisDp.absolute_trial(iTrialNow);
                 
                 if iChannel ==1
                     if strcmp(dp.Date,'150101')&& strcmp(dp.Animal,'FI12_1480')
                         if iCond == 1
                             
                             thisCond(iTrialNow,iChannel) = 3;
      
                         elseif iCond == 2
                             
                             thisCond(iTrialNow,iChannel) = 1;
                             
                             
                         elseif iCond == 3
                             
                             thisCond(iTrialNow,iChannel) = 2;
                             
                             
                         end
                     else
                         thisCond(iTrialNow,iChannel) = iCond;
                         
                     end
                 end
                 
                 baselineW(iTrialNow,:,iChannel) = data.lowFilt(iChannel,(eventSyncPulseTimesBulk(thisTrial)-baselineWindow:eventSyncPulseTimesBulk(thisTrial)));
                 baseline(iTrialNow,iChannel) = mean(baselineW(iTrialNow,:,iChannel));
                 
                 deltaF(iTrialNow,:,iChannel) = data.lowFilt(iChannel,(eventSyncPulseTimesBulk(thisTrial)-WOI(1):eventSyncPulseTimesBulk(thisTrial)+WOI(2))) - baseline(iTrialNow,iChannel);
                 
                 deltaF_F(iTrialNow,:,iChannel) = deltaF(iTrialNow,:,iChannel)/baseline(iTrialNow,iChannel);
                 
                 %kernel = getFilterFun(200,'gaussian')
                 %                 kernel = gausswin(length_kernel,alpha);
                 %
                 %                 kernel = kernel/(max(kernel));
                 
                 smooth_DeltaF_F(iTrialNow,:,iChannel) = smooth(deltaF_F(iTrialNow,:,iChannel),size_movingAverage)';
                 
                 %for debuging
%                   figure
%                   plot(deltaF_F(i,:,z))
%                   hold on
%                   plot(smooth_DeltaF_F(i,:,z),'k','linewidth',5)
%                   
                 
                 
             end
             
             
             if iChannel == 1
                 
                 deltaF_F_g_all= [deltaF_F_g_all(:,:); deltaF_F(:,:,iChannel)];
                 deltaF_F_g_all_smooth = [deltaF_F_g_all_smooth(:,:); smooth_DeltaF_F(:,:,iChannel)];
                 trialCond =  [trialCond;thisCond];
                 
             elseif iChannel==2
                 
                 deltaF_F_r_all = [deltaF_F_r_all(:,:); deltaF_F(:,:,iChannel)];
                 deltaF_F_r_all_smooth = [deltaF_F_r_all_smooth(:,:); smooth_DeltaF_F(:,:,iChannel)];
                 
             end
            
           
            
         end
        
        
       
    end
    
               
    
end


if useSmoothData
    
   deltaF_F_g_all = deltaF_F_g_all_smooth ;
   deltaF_F_r_all = deltaF_F_r_all_smooth ;
    
end

%% Correction on delta f/f
deltaF_F_g = [];
deltaF_F_r = [];

rc = size(deltaF_F_g_all);

nElements = rc(1)*rc(2);

deltaF_F_g = reshape(permute(deltaF_F_g_all(:,:),[2 1]),1,nElements);


deltaF_F_r = reshape(permute(deltaF_F_r_all(:,:),[2 1]),1,nElements);

data = correctionGreen(data,deltaF_F_g,deltaF_F_r);

corrGreenAll = reshape(data.corrGreen,rc(2),rc(1))';

dp.Bulk.CorrectedSignal = corrGreenAll;

dp.Bulk.xAxisForCorrectedSignal = xaxis;



bigDp = [bigDp dp];
dayCorrGreenAll = [dayCorrGreenAll ; corrGreenAll];

    end
    
    animalAverageCorrectedSignal(iAnimal,:) = mean(dayCorrGreenAll);
    
    if splitByCond
        
        for iCond = 1:length(splitCond)
            
%             if sum(ismember(trialCond,3))>0
%                 thisCondIdx = find(trialCond==iCond);
%                 if iCond ==1
%                     animalAverageCorrectedSignalSplit(iAnimal,:,3) = mean(dayCorrGreenAll(thisCondIdx,:));
%                 elseif iCond ==2
%                     animalAverageCorrectedSignalSplit(iAnimal,:,1) = mean(dayCorrGreenAll(thisCondIdx,:));
%                 elseif iCond ==3
%                     animalAverageCorrectedSignalSplit(iAnimal,:,2) = mean(dayCorrGreenAll(thisCondIdx,:));    
%                     
%                 end
           % else
                thisCondIdx = find(trialCond==iCond);
                
                animalAverageCorrectedSignalSplit(iAnimal,:,iCond) = mean(dayCorrGreenAll(thisCondIdx,:));
            %end
            
        end
    end
    
    
    
end

%%

nGcamp = sum(virusGcamp);
nYFP = nAnimals-nGcamp;

rangeGcamp = linspace(0.5,1,nGcamp)';

colorsGcamp = zeros(nGcamp,3);

colorsGcamp(:,2) = rangeGcamp;

rangeYFP = linspace(0.5,1,nYFP)';

colorsYFP = zeros(nYFP,3);

colorsYFP(:,3) = rangeYFP;


hSummary = figure;
set(hSummary, 'WindowStyle', 'docked');
 
firstTrial = 0;
trials = [];

gCampCount = 0;
yfpCount = 0;

for iAnimal = 1:nAnimals
    
    if virusGcamp(iAnimal) == 1
        gCampCount = gCampCount +1;
        
        baseNormNow = mean(animalAverageCorrectedSignal(iAnimal,1:sizeNormWind));
        animalAverageCorrectedSignalNorm(iAnimal,:) = animalAverageCorrectedSignal(iAnimal,:) - baseNormNow;
        
        plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsGcamp(gCampCount,:),'linewidth',2)
        hold on
        
      
        
    else
        yfpCount = yfpCount + 1;
        
        baseNormNow = mean(animalAverageCorrectedSignal(iAnimal,1:sizeNormWind));
        animalAverageCorrectedSignalNorm(iAnimal,:) = animalAverageCorrectedSignal(iAnimal,:) - baseNormNow;
        
        plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsYFP(yfpCount,:),'linewidth',2)
        hold on
        
    end       
            
        
end 
axis tight
axis square
legend (animalNames)
xlabel ('time in ms')
ylabel ('delta f/f')
title('Corrected Signal using fit parameters')
%%
bulkSumFigsDir = r.Dir.BulkSummFigs;

fileName = 'SummaryAllAnimals';

figDir = fullfile([bulkSumFigsDir , slash, fileName '_alignedOn_' alignCond '.pdf']);
save2pdf(figDir)

%% Selected animals split by Cond
 
% 
% nGcamp = sum(virusGcamp);
% nYFP = nAnimals-nGcamp;
% 
% rangeGcamp = linspace(0.5,1,nGcamp)';
% 
% colorsGcamp = zeros(nGcamp,3);
% 
% colorsGcamp(:,2) = rangeGcamp;
% 
% rangeYFP = linspace(0.5,1,nYFP)';
% 
% colorsYFP = zeros(nYFP,3);
% 
% colorsYFP(:,3) = rangeYFP;
% 
% animalsYFPIdx = find(virusGcamp==0);
% animalsGcamp = 4;
% 
% 
% hSummary = figure;
% set(hSummary, 'WindowStyle', 'docked');
%  
% firstTrial = 0;
% trials = [];
% 
% gCampCount = 0;
% yfpCount = 0;
% 
% for iAnimal = [4,6,7]%1:nAnimals %
%     for iCond = 1:length(splitCond)
%         
%         if virusGcamp(iAnimal) == 1
%             
%             baseNormNow = mean(animalAverageCorrectedSignalSplit(iAnimal,1:sizeNormWind,iCond));
%             animalAverageCorrectedSignalNorm(iAnimal,:) = animalAverageCorrectedSignalSplit(iAnimal,:,iCond) - baseNormNow;
%             
%             if iCond ==1
%                 gCampCount = gCampCount +1;
%                 
%                 plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsGcamp(gCampCount,:),'linewidth',2)
%                 hold on
%             else
%                 
%                 plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsGcamp(gCampCount,:),'linewidth',2,'linestyle','--')
%                 hold on
%             end
%             
%             
%         else
%             
%             baseNormNow = mean(animalAverageCorrectedSignalSplit(iAnimal,1:sizeNormWind,iCond));
%             animalAverageCorrectedSignalNorm(iAnimal,:) = animalAverageCorrectedSignalSplit(iAnimal,:,iCond) - baseNormNow;
%             
%             if iCond == 1
%                 yfpCount = yfpCount + 1;
%                 
%                 plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsYFP(yfpCount,:),'linewidth',2)
%                 hold on
%             else
%                 plot(xaxis,animalAverageCorrectedSignalNorm(iAnimal,:),'color',colorsYFP(yfpCount,:),'linewidth',2,'linestyle','--')
%                 hold on
%             end
%             
%             
%             
%         end
%     end
%     
% end
% axis tight
% axis square
% %legend (animalNames)
% xlabel ('time in ms')
% ylabel ('delta f/f')
% title('Corrected Signal using fit parameters')
% 
% bulkSumFigsDir = r.Dir.BulkSummFigs;
% 
% fileName = 'SummaryAllAnimals';
% 
% figDir = fullfile([bulkSumFigsDir , slash, fileName '_alignedOn_' alignCond '.pdf']);
% save2pdf(figDir)
% 
% 
% 


 %% Average animals by virus split by Cond

splitCond = [1 2 3];

rangeCond = linspace(0.4,1,length(splitCond))';

colorsGcamp = zeros(length(splitCond),3);

colorsGcamp(:,2) = rangeCond;


colorsYFP = zeros(length(splitCond),3);

colorsYFP(:,3) = rangeCond;


animalsYFPIdx = find(virusGcamp==0);
animalsGcamp = 4;


hSummary = figure;
set(hSummary, 'WindowStyle', 'docked');
 
CombinedAnimalAverageCorrectedSignalSplit(1,:,:) = animalAverageCorrectedSignalSplit(animalsGcamp,:,:);

for iCond = 1:length(splitCond)
    CombinedAnimalAverageCorrectedSignalSplit(2,:,iCond) = mean(animalAverageCorrectedSignalSplit(animalsYFPIdx,:,iCond));
end


for iCond = 1:length(splitCond)
    
    baseNormNow = mean(CombinedAnimalAverageCorrectedSignalSplit(1,1:sizeNormWind,iCond));
    CombinedAnimalAverageCorrectedSignalSplitNorm(1,:,iCond) = CombinedAnimalAverageCorrectedSignalSplit(1,:,iCond) - baseNormNow;
    baseNormNow = mean(CombinedAnimalAverageCorrectedSignalSplit(2,1:sizeNormWind,iCond));
    CombinedAnimalAverageCorrectedSignalSplitNorm(2,:,iCond) = CombinedAnimalAverageCorrectedSignalSplit(2,:,iCond) - baseNormNow;
    
    plot(xaxis/1000,CombinedAnimalAverageCorrectedSignalSplitNorm(1,:,iCond),'color',colorsGcamp(iCond,:),'linewidth',2)
    hold on
    
    plot(xaxis/1000,CombinedAnimalAverageCorrectedSignalSplitNorm(2,:,iCond),'color',colorsYFP(iCond,:),'linewidth',2)
    
end

   
  %%  
yAxis = ylim;

plot([0 0],yAxis,'--','color',[0.5 0.5 0.5])

axis tight
axis square
set(gca,'TickDir','out','FontSize',15,'LineWidth',2)
box off

%legend ('Big Reward Gcamp6','Small Reward Gcamp6','Big Reward YFP','Small Reward YFP','Location','best')
xlabel ('Time in sec','interpreter','latex')
ylabel('$\Delta$F/F Corrected','interpreter','latex');
title('Bulk Activity aligned on reward','interpreter','latex')

bulkSumFigsDir = r.Dir.BulkSummFigs;

fileName = 'SummaryAverageAnimals';

figDir = fullfile([bulkSumFigsDir , slash, fileName '_alignedOn_' alignCond '.pdf']);
save2pdf(figDir)



